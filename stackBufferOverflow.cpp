#include <cstdio>
#include <cstring>

void naive_function(char* const str) {
    char c[16] = "Hello, World!  ";
    printf("%s\n", c);
    strcpy(c, str); //* No check for bounds of str
}

/** Exploit function, which will wrest control flow away from the instructions
*   at the intended return location */
void exploit_func(void) {
    printf("L3l; u R hax0ed; xD.\n");
    goto label; //* Put us back in normal program execution.
                //* A real hack would not be so nice :)
}

constexpr auto address_size = sizeof(&exploit_func); // for portability

int main() {
    //* Allocate space for an exploit string
    char malware_string [16 + 2*address_size];
    //* find address of exploit function and write to char buffer
    auto pexploit = &exploit_func;
    sprintf(malware_string, "Hello, World!   %p%p", nullptr, pexploit);
    //* Call naive_function on malware_string
    naive_function(malware_string);
label:
    return 0;
}

// TODO: get this exploit to work
// TODO: put the functions in two separate modules (source files) and hack again
